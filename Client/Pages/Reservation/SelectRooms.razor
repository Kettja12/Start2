@inject AccountService AccountService
@inject IStringLocalizer<Resource> R
@inject StateService StateService
@inject ApiService ApiService

<div id="selectRoomsDiv" class="modal" style=@show>
    <div class="modal-dialog" style="width:500px">
        <div class="modal-content">
            <header class="modal-header">
                <h3 class="modal-title">@R["Select rooms"]</h3>
                <button type="button" @onclick="@CloseSelectRooms" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

            </header>
            <div class="modal-body">
                <label>@R["Timespan"]</label>
                <div>
                    <input type="date" @bind="@ResDateStart" />
                    <input type="date" @bind="@ResDateEnd" />
                </div>
                <div>
                    <input type="checkbox" @bind="@SelectAll"
                           @onclick="() => CheckAll()"
                           class="w3-check" />
                    <label>Kaikki tilat</label>
                </div>
                <div id="roomlist" class="" style="height:100px;overflow-y:auto;">
                    @foreach (var item in RoomKeys)
                    {
                        <div>
                            <div class="">
                                <input type="checkbox" @bind="item.IsChecked"
                                   class="" />
                                <label>@item.RoomID</label>
                            </div>
                        </div>
                    }

                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary"
                        @onclick="@LoadCalendars">
                    valitse
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Start2.Client.Pages.Reservation.Index Reservation { get; set; }

    String show;
    public DateTime ResDateStart { get; set; } = DateTime.Today;
    public DateTime ResDateEnd { get; set; } = DateTime.Today.AddDays(30);
    public bool SelectAll { get; set; }
    public List<ReservationNode> ReservationNodeList { get; set; } = new List<ReservationNode>();
    public string Error = string.Empty;
    public bool isBusy;

    public class RoomKey
    {
        public int Id { get; set; }
        public string RoomID { get; set; }
        public bool IsChecked { get; set; }
    };
    public List<RoomKey> RoomKeys { get; set; } = new();

    public async Task ShowSelectRooms()
    {
        show = "display: block;";
        if (RoomKeys.Any() == false)
        {
            await GetRoomKeys();
        }
    }
    protected void CloseSelectRooms()
    {
        show = "display: hidden;";
    }

    public async Task<bool> GetRoomKeys()
    {
        try
        {
            if (StateService.Token == null) return false;
            isBusy = true;
            var reservation = new ReservationController(ApiService, StateService);
            List<ReservationNode> items = await reservation.LoadReservationNodesAsync();
            isBusy = false;
            if (items == null)
            {
                Error = R[reservation.Status];
            }
            else
            {
                RoomKeys = new List<RoomKey>();
                foreach (var item in items)
                {
                    RoomKeys.Add(new RoomKey() { Id = item.Id, RoomID = item.Name });    
                }
                ReservationNodeList = items;
                return true;
            }
            return false;


        }
        catch (Exception e)
        {
            CloseSelectRooms();
            //Reservation.Mainlayout.InfoMessage.Show("alert-primary", e.Message);
            return false;
        }

    }

    void CheckAll()
    {
        foreach (var item in RoomKeys)
        {
            item.IsChecked = !SelectAll;
        }
    }
    async Task LoadCalendars()
    {
        CloseSelectRooms();

        await Reservation.LoadCalendars();
    }

}



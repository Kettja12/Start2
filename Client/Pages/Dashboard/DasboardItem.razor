@inject IStringLocalizer<Resource> R
<div class="card m-2" style="width: 300px;" draggable="true"
     ondragover="event.preventDefault()"
     @ondragstart="HandleDragStart"
     @ondrop="HandleDragDropAsync">
    <div class="card-header primary">
        <div style="float:left"><h5 class="card-title">@R[Item.Control]</h5></div>
        <div style="float:right;padding:0.1em;margin-left:10px">
            <i class="bi-x-square" @onclick="RemoveControlAsync"></i>
        </div>
        <div style="float: right;padding:0.1em" @onclick="Reload">
            <span class="btn-label oi oi-reload"></span>
        </div>

    </div>
    <div class="card-body">
        @Content
    </div>
</div>

@code {
    [CascadingParameter] Start2.Client.Pages.Dashboard.Index Container { get; set; }
    [Parameter]
    public Start2.Shared.Model.Dashboard.DashboardItem Item { get; set; }
    private string title = "Item1";
    RenderFragment Content { get; set; }
    bool refresh;

    protected override void OnParametersSet()
    {
        LoadContent();
    }
    protected void LoadContent()
    {
        if (Content==null)
            Content = RenderComponent(Type.GetType("Start2.Client.Pages.Dashboard." + Item.Control));
    }
    private RenderFragment RenderComponent(Type t) => builder =>
    {
        builder.OpenComponent(0, t);
        builder.AddAttribute(1, "Refresh", refresh);
        builder.CloseComponent();
    };

    public void Reload()
    {
        refresh = !refresh;
        //Item.Refresh = true;
        LoadContent();
        StateHasChanged();
    }

    public async Task RemoveControlAsync()
    {
        await Container.RemoveControlAsync(Item.Id);
    }
    private void HandleDragStart()
    {
        Container.CurrentIndex = Item.Id;
    }

    private async Task HandleDragDropAsync()
    {
        if (Item.Id == Container.CurrentIndex)
        {
            return;
        }
        await Container.MoveControlAsync(Item.Id);
    }
}

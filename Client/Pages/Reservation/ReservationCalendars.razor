@inject AccountService AccountService
@inject IStringLocalizer<Resource> R
@inject StateService StateService
@inject ApiService ApiService

<div class="datacontent">
    <CascadingValue Value="this">
        <AddModifyReservation @ref="CurrentReservation" />
    </CascadingValue>

    <table>
        <thead>
            <tr>
                @foreach (var item in Header)
                {
                    <th class="titlecol">
                        <label>@item</label>
                    </th>
                }
            </tr>
        </thead>
        @*
            <tr id="roomcolTemplate">
            <th class="titlecol roomcol">@</th>
            </tr>

            <tr id="headerItemTemplate">
            <th class="titlecol">@</th>
            </tr>*@
        @foreach (var item in ReservationRows)
        {
            <tr>
                <td class="titlecol">
                    <label>@item.RoomKey.RoomID</label>
                </td>
                @foreach (var res in item.DayStates)
                {
                    <td class="titlecol @res.cssClass"
                @onclick="()=>SelectCel(res)">
                        <label></label>
                    </td>
                }
            </tr>
        }
    </table>
</div>


@code {
    public record DayState(string cssClass, Reservation reservation);
    private AddModifyReservation CurrentReservation { get; set; }
    public string Error = string.Empty;
    public bool isBusy;
    public class ReservationRow
    {
        public SelectRooms.RoomKey RoomKey { get; set; }
        public List<DayState> DayStates { get; set; }
    }

    //        [Inject] StateContainer StateContainer { get; set; }
    //        [Inject] ApiService ApiService { get; set; }

    [CascadingParameter]
    public Start2.Client.Pages.Reservation.Index ReservationPage { get; set; }
    private List<ReservationRow> ReservationRows = new();
    private List<Reservation> ReservationList { get; set; }
    private List<string> Header = new();
    DayState currentDayState { get; set; }

    public async Task LoadCalendars()
    {

        Header = new List<string>();
        Header.Add("Tila");
        DateTime datestart = ReservationPage.SelectRooms.ResDateStart;
        DateTime dateEnd = ReservationPage.SelectRooms.ResDateEnd;
        var indexdate = datestart;
        while (indexdate <= dateEnd)
        {
            Header.Add(indexdate.Day.ToString());
            indexdate = indexdate.AddDays(1);
        }
        ReservationList = await GetReservations();
        ReservationRows = new List<ReservationRow>();
        foreach (SelectRooms.RoomKey item in ReservationPage.SelectRooms.RoomKeys)
        {
            if (item.IsChecked)
            {
                List<Reservation> reservationRowitems = ReservationList.Where(x => x.ReservationNodeId == item.Id).ToList();
                var s = setReservationRow(datestart,dateEnd,item,reservationRowitems);
                ReservationRows.Add(s);
            }
        }
        StateHasChanged();
    }
    public ReservationRow setReservationRow(
        DateTime datestart,
        DateTime dateEnd,
        SelectRooms.RoomKey item,
        List<Reservation> reservationRowitems)
    {
        var dayStates = new List<DayState>();
        var s = new ReservationRow() { RoomKey = item, DayStates = dayStates };
        DateTime indexdate = datestart;
        while (indexdate <= dateEnd)
        {
            var isSet = false;
            foreach (var r in reservationRowitems)
            {
                if (r.ReservationStartDate <= indexdate
                    && r.ReservationEndDate >= indexdate)
                {
                    dayStates.Add(new DayState("reserved", r));
                    isSet = true;
                    break;
                }
            }
            if (isSet == false)
            {
                dayStates.Add(new DayState("free", new Reservation()
                    {
                        ReservationNodeId = item.Id,
                        ReservationStartDate = indexdate,
                        ReservationEndDate = indexdate
                    }
                ));

            }
            indexdate = indexdate.AddDays(1);
        }
        return s;
    }
    public async Task<List<Reservation>> GetReservations()
    {
        try
        {
            //var reservationFilter = new ReservationFilter()
            //    {
            //        ReservationDateStart = Reservation.SelectRooms.ResDateStart,
            //        ReservationDateEnd = Reservation.SelectRooms.ResDateEnd
            //    };

            if (StateService.Token == null) return new List<Reservation>();
            isBusy = true;
            var reservation = new ReservationController(ApiService, StateService);
            List<Reservation> items = await reservation.LoadReservationAsync();
            isBusy = false;
            if (items == null)
            {
                Error = R[reservation.Status];
            }
            else
            {
                return items;
            }
            return new List<Reservation>();
        }
        catch (Exception e)
        {
            //Reservation.Mainlayout.InfoMessage.Show("alert-primary", e.Message);
            return new List<Reservation>();
        }

    }

    public async Task SelectCel(DayState dayState)
    {
        currentDayState = dayState;
        await CurrentReservation.ShowReservaation(dayState.reservation);
    }

    public async Task SetCel(Reservation currentReservation)
    {
        foreach(var item in ReservationRows)
        {
            if (item.RoomKey.Id == currentDayState.reservation.ReservationNodeId)
            {
                await SaveReservation(currentReservation);
                List<Reservation> reservationRowitems = 
                    ReservationList.Where(x => x.ReservationNodeId == item.RoomKey.Id).ToList();
                DateTime datestart = ReservationPage.SelectRooms.ResDateStart;
                DateTime dateEnd = ReservationPage.SelectRooms.ResDateEnd;
                var s = setReservationRow(datestart,dateEnd,item.RoomKey,reservationRowitems);
                item.DayStates = s.DayStates;
                StateHasChanged();
                break;
            }
        }

    }

    protected async Task<Reservation> SaveReservation(Reservation reservation)
    {
        if (ApiService == null
            || StateService == null
            //|| InfoMessage == null
            || R == null) return null;

        isBusy = true;
        bool insert = reservation.Id == 0;
        var controller = new ReservationController(ApiService, StateService);
        reservation = await controller
            .SaveReservationAsync(reservation);
        isBusy = false;
        if (reservation != null)
        {
            if (insert)
                ReservationList.Add(reservation);
        }
        if (string.IsNullOrEmpty(controller.Status) == false)
        {
            var r = R.Translate(controller.Status);
            //InfoMessage.Show(false, r);
        }
        return reservation;

    }

}

@inject IStringLocalizer<Resource> R
@inject StateService StateService
@inject AccountService AccountService
@inject ApiService ApiService

<InfoMessage @ref="InfoMessage" />
@if (Refresh)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

else
{

    <form Model="@Content">
        <input type="text" class="form-control" id="username" @bind="Content" />
    </form>
}
@code {
    [Parameter] public bool Refresh { get; set; }
    [CascadingParameter] DashboardItem Container { get; set; }
    private string Content { get; set; }

    public InfoMessage InfoMessage { get; set; }

    public bool operationOK = false;

    protected override async Task OnParametersSetAsync()
    {

        // if (Container.Item.Refresh == false) return;
        // Container.Item.Refresh = false;
        await LoadDasboardItem();

    }
    protected async Task LoadDasboardItem()
    {
        try
        {
            Refresh = true;
            Start2.Shared.Model.Dashboard.Item2 paramsIn = new();
            if (Content != null)
                paramsIn.Data = Content;
            var response = await ApiService.PostServiceAsync(
                APIServices.DashboardGetItem2,
                paramsIn);
            Refresh = false;
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var result = await response.Content.ReadFromJsonAsync<
                Start2.Shared.Model.Dashboard.Item2>();
                Content = result.Data;
                return;
            }
            var s = response.Content.ReadAsStringAsync().Result;
            if (string.IsNullOrEmpty(s))
                s = "Service call failed.";
            InfoMessage.Show(false, R[s]);
            return;
        }
        catch (Exception e)
        {
            Refresh = false;
            InfoMessage.Show(false, R["Service call failed."]);
        }

    }
}








